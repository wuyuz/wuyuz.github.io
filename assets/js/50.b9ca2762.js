(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{395:function(n,e,a){"use strict";a.r(e);var t=a(42),s=Object(t.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"rest-framework版本图书管理系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rest-framework版本图书管理系统"}},[n._v("#")]),n._v(" REST framework版本图书管理系统")]),n._v(" "),a("h3",{attrs:{id:"drf构建后台数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#drf构建后台数据"}},[n._v("#")]),n._v(" DRF构建后台数据")]),n._v(" "),a("h4",{attrs:{id:"本例的model如下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本例的model如下"}},[n._v("#")]),n._v(" 本例的Model如下")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("from django.db import models\n\n\nclass Publish(models.Model):\n    name = models.CharField(max_length=32)\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=32,verbose_name='姓名')\n\n\nclass Book(models.Model):\n    title = models.CharField(verbose_name='书名',max_length=56)\n    price = models.DecimalField(verbose_name='价格',max_digits=8,decimal_places=2)\n    pub_date = models.DateField(verbose_name='出版日期')\n\n    publish = models.ForeignKey(to=Publish,on_delete=models.CASCADE)\n    authors = models.ManyToManyField(to=Author)\n")])])]),a("h4",{attrs:{id:"注册drf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册drf"}},[n._v("#")]),n._v(" 注册DRF")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'book.apps.BookConfig',\n    'rest_framework',\n]\n")])])]),a("h4",{attrs:{id:"路由分发如下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由分发如下"}},[n._v("#")]),n._v(" 路由分发如下")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("# 查看与新增—— GET与POST\nurl(r'^books/$',views.BookListView.as_view(),name='book_get_post'),\n# 修改与删除—— PUT与DELETE\nurl(r'^book/(?P<pk>\\d+)/$',views.BookView.as_view(),name='book_put_delete'),\n")])])]),a("h4",{attrs:{id:"视图函数如下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#视图函数如下"}},[n._v("#")]),n._v(" 视图函数如下")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('from rest_framework.views import APIView\nfrom rest_framework.response import Response\n\nfrom book import models\nfrom book.my_serializer import BookSerializer\n\n\nclass BookListView(APIView):\n\n    def get(self, request, *args, **kwargs):\n        """ 获取书籍信息 """       \n        # 用自定义的序列化器去实现~~~\n        all_books = models.Book.objects.all()\n        # 第一个参数是instance~是一个对象\n        # 但是all()方法查出来的是一个“对象列表”——所以需要加many=True\n        ser_obj = BookSerializer(all_books, many=True)\n        # 返回自定义序列化器的data\n        return Response(ser_obj.data)\n\n\n    def post(self, request, *args, **kwargs):\n        """新增数据 返回新建的书籍的数据 json格式 """\n        # 用序列化器进行校验！！！\n        # 注意：这里用的是request.data去取新增的值！！！\n        print(\'>>>>>>\',request.data)\n\n        ser_book = BookSerializer(data=request.data)\n        if ser_book.is_valid():\n            ser_book.save()\n            # 校验成功并且成功保存的话~返回新增的数据！\n            return render(request,\'book_list.html\')\n        else:\n            print(ser_book.errors)\n            return Response(ser_book.errors)\n\n\nclass BookView(APIView):\n\n    def get(self,request,pk,*args,**kwargs):\n        # 找Model对象\n        book_obj = models.Book.objects.filter(pk=pk).first()\n        # 序列化器对象——此时instance只有一个book_obj，不用加many=True了！\n        ser_obj = BookSerializer(instance=book_obj)\n        # 用Response方法返回序列化器对象的data\n        return Response(ser_obj.data)\n\n    def put(self,request,pk,*args,**kwargs):\n\n        book_obj = models.Book.objects.filter(pk=pk).first()\n        # partial=True —— 表示支持“部分提交/局部更新”\n        ser_obj = BookSerializer(instance=book_obj,data=request.data,partial=True)\n        if ser_obj.is_valid():\n            ser_obj.save()\n            return Response(ser_obj.data)\n        else:\n            return Response(ser_obj.errors)\n\n    # 删除方法不需要用序列化器了\n    def delete(self,request,pk,*args,**kwargs):\n        obj = models.Book.objects.filter(pk=pk).first()\n        if obj:\n            obj.delete()\n            return Response({\'msg\':\'删除成功！\'})\n        else:\n            return Response({"error":\'数据不存在！\'})\n')])])]),a("h4",{attrs:{id:"自定义的序列化器代码如下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义的序列化器代码如下"}},[n._v("#")]),n._v(" 自定义的序列化器代码如下")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("# -*- coding:utf-8 -*-\nfrom rest_framework import serializers\n\nfrom book import models\n\nclass PublishSerializer(serializers.Serializer):\n    id = serializers.IntegerField(read_only=True)\n    name = serializers.CharField()\n\n\nclass AuthorSerializer(serializers.Serializer):\n    id = serializers.IntegerField()\n    name = serializers.CharField()\n\n\nclass BookSerializer(serializers.Serializer):\n    # 与Book中的属性对应上\n    # id 也需要～后面编辑与删除用得到~~设置read_only，添加的时候不必填\n    id = serializers.IntegerField(read_only=True)\n    title = serializers.CharField()\n    price = serializers.DecimalField(max_digits=8,decimal_places=2)\n    pub_date = serializers.DateField()\n\n    # 外键的~这个字段其实存的是id~~注意这里是publish_id——数据库中存储的字段~~但是这种方式只能拿到id值\n    # publish_id = serializers.IntegerField()\n\n    # 多对一 外键关联~\n    # 如果我们想拿publish的name的话，就需要交给上一个序列化器PublishSerializer去处理\n    # 提交的时候~~不用填这个，所以设置required=False\n    # 只有get请求要他而post请求不用它~所以设置 read_only=True\n    publish = PublishSerializer(required=False,read_only=True)\n    # 多对多~\n    # 只有get请求要他而post请求不用它：read_only=True\n    # 下面必须有一个 get_字段名 的方法对应！\n    authors = serializers.SerializerMethodField(read_only=True)\n\n    # post提交用这个字段~是int类型的\n    # get请求不要他~~设置 write_only=True\n    post_publish = serializers.IntegerField(write_only=True)\n    # post提交用这个字段~是一个ListField~列表里是数字\n    # get请求不要他~~设置 write_only=True\n    post_authors = serializers.ListField(write_only=True)\n\n    # 多对多关系查找authors用到的方法——与上面的SerializerMethodField对应\n    def get_authors(self,obj):\n        # 注意~obj是Book对象！！\n        # print(obj)\n        # 基于对象的跨表查询~注意是多个对象了~many应该设置为True\n        ser_obj = AuthorSerializer(obj.authors.all(),many=True)\n        return ser_obj.data\n\n\n    # POST方式增加数据需要\n    def create(self, validated_data):\n        # post提交的时候~~重写create方法\n        # post提交给的数据应该是这种格式的\n        # 注意后面那两个是post_publish、post_authors~专门用于提交的字段\n        \"\"\"\n         {\n            \"title\": \"西游记\",\n            \"price\": 12.20,\n            \"pub_date\": \"2019-12-22T10:10:11Z\",\n            \"post_publish\": 1,\n            \"post_authors\": [1,2]\n        }\n        \"\"\"\n        print('validated_data>>>',validated_data)\n        book_obj = models.Book.objects.create(\n            title=validated_data.get('title'),\n            price=validated_data.get('price'),\n            pub_date=validated_data.get('pub_date'),\n            publish_id=validated_data.get('post_publish'),\n        )\n        # 多对多插入数据~~基于对象的跨表查询\n        # 注意用set方法存多对多关系的数据\n        book_obj.authors.set(validated_data.get('post_authors'))\n        return book_obj\n\n    # PUT请求修改数据需要写的方法\n    def update(self, instance, validated_data):\n        # 如果取到了就用修改的~~如果没有就用原来的数据\n        instance.title = validated_data.get('title',instance.title)\n        instance.prince = validated_data.get('price',instance.price)\n        instance.pub_date = validated_data.get('pub_date',instance.pub_date)\n        # 上面设置了post_publish为write_only了~所以修改要用post_publish\n        instance.publish_id = validated_data.get('post_publish',instance.publish_id)\n        # 先save~然后再处理一下多对多关系的数据\n        instance.save()\n        # 基于对象的跨表查询~~注意用set方法存多对多关系的数据\n        # 如果没有的话需要用all方法取出所有对象~~\n        # # 上面设置了post_authors为write_only了~所以修改要用post_authors\n        instance.authors.set(validated_data.get('post_authors',instance.authors.all()))\n        # 最后记得把instance 返回\n        return instance\n")])])]),a("h4",{attrs:{id:"在drf自带的页面进行数据的增删改查测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在drf自带的页面进行数据的增删改查测试"}},[n._v("#")]),n._v(" 在DRF自带的页面进行数据的增删改查测试")]),n._v(" "),a("p",[n._v("至此DRF就写好了，我们可以根据路由去访问对应的页面进行数据的增删改查操作（需要注意，必须先在settings中注册了rest_framework后才能访问DRF自带的页面）")]),n._v(" "),a("p",[n._v("DRF自带的页面是这样的：")]),n._v(" "),a("p",[n._v("当然，我们不能让用户看这样的页面，这就需要前端请求DRF构建好的数据进行标签的构建了。")]),n._v(" "),a("h3",{attrs:{id:"前端请求drf构建好的数据并构建页面效果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端请求drf构建好的数据并构建页面效果"}},[n._v("#")]),n._v(" 前端请求DRF构建好的数据并构建页面效果")]),n._v(" "),a("h4",{attrs:{id:"测试路由如下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试路由如下"}},[n._v("#")]),n._v(" 测试路由如下")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("# 书籍展示的页面\nurl(r'^book_list/$',views.book_list,name='book_list'),\n# 添加书籍的页面\nurl(r'^add_book_view/$',views.add_book,name='add_book_view'),# 编辑书籍的展示页面~~\nurl(r'edit_book_view/(?P<pk>\\d+)/$',views.edit_book,name='edit_book'),\n")])])]),a("h4",{attrs:{id:"视图函数如下-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#视图函数如下-2"}},[n._v("#")]),n._v(" 视图函数如下")]),n._v(" "),a("p",[n._v("视图函数非常简单，再加上是进行数据测试，所以这里的视图函数只负责返回页面。")]),n._v(" "),a("p",[n._v("数据的操作全部是用ajax与js做的。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("# 展示 书籍列表\ndef book_list(request):\n    return render(request,'book_list.html')\n\n# 展示 添加书籍页面\ndef add_book(request):\n    return render(request,'add_book.html')\n\n# 编辑书籍的展示页面\ndef edit_book(request,pk):\n    return render(request,'edit_book.html')\n")])])]),a("h4",{attrs:{id:"所有页面的母版"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#所有页面的母版"}},[n._v("#")]),n._v(" 所有页面的母版")]),n._v(" "),a("h4",{attrs:{id:"书籍展示页面及删除书籍的功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#书籍展示页面及删除书籍的功能"}},[n._v("#")]),n._v(" 书籍展示页面及删除书籍的功能")]),n._v(" "),a("p",[n._v("书籍展示发送的是get请求。")]),n._v(" "),a("p",[n._v("删除书籍发送的是delete请求。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("{% extends 'base.html' %}\n\n{% block title %}\n    主页\n{% endblock title %}\n\n\n{% block pannel-body %}\n\n    {% csrf_token %}\n    <a id=\"add_book\" href=\"{% url 'add_book_view' %}\" class=\"btn btn-success pull-right\">添加书籍</a>\n    <br><br>\n    <div id=\"div_table\" class=\"table-responsive\" style=\"text-align: center\">\n        <table id=\"table\" class=\"table table-striped table-bordered table-hover table-condensed\">\n            <thead>\n            <tr class=\"success\">\n                <th>编号</th>\n                <th>书籍名称</th>\n                <th>价格</th>\n                <th>出版日期</th>\n                <th>出版社</th>\n                <th>作者</th>\n                <th>操作</th>\n            </tr>\n            </thead>\n            {# 委托的父级标签用tbody #}\n            <tbody id=\"tbody\">\n\n\n            </tbody>\n        </table>\n    </div>\n\n\n\n{% endblock pannel-body %}\n\n{% block script %}\n    <script>\n\n        // 格式化时间的函数\n        function formatDate(time) {\n            var date = new Date(time);\n\n            var year = date.getFullYear(),\n                month = date.getMonth() + 1,//月份是从0开始的\n                day = date.getDate(),\n                hour = date.getHours(),\n                min = date.getMinutes(),\n                sec = date.getSeconds();\n            var newTime = year + '-' +\n                month + '-' +\n                day + ' ' +\n                hour + ':' +\n                min + ':' +\n                sec;\n            return newTime;\n        }\n\n        // 页面加载自动触发ajax请求～向DRF获取所有数据并在前端渲染\n        $(document).ready(function () {\n            $.ajax({\n                url: '/books/',\n                type: 'get',\n                success: function (data) {\n                    console.log(data, typeof (data));\n                    // data是一个object\n                    for (var i = 0; i < data.length; i++) {\n                        // data[i]是一个个自定义对象\n                        //console.log(data[i],typeof(data[i]));\n\n                        var tr = document.createElement('tr');\n                        var td_num = document.createElement('td');\n                        // 提前把编号写进tr中去 注意同时将id也加进去\n                        td_num.innerHTML = (i + 1) + '<span class=\"book_pk\" style=\"display: none\">' + data[i].id + '</span> </td>';\n                        //这时tr的第一个元素就是一个个的编号——并且里面的span标签带着每个数据的id\n                        tr.append(td_num);\n\n                        for (var j in data[i]) {\n                            //console.log(j);\n                            // 不用填id字段\n                            if (j === 'id') {\n                                continue;\n                            }\n                            // 新建一个td标签，把遍历的数据加进去\n                            var td = document.createElement('td');\n\n                            //格式化一下出版日期的格式\n                            if (j === 'pub_date') {\n                                data[i][j] = formatDate(data[i][j]);\n                            }\n\n                            //展示出版社的名字\n                            if (j === 'publish') {\n                                data[i][j] = data[i][j]['name'];\n                            }\n                            //展示作者的名字\n                            if (j === 'authors') {\n                                //console.log(data[i][j]);\n                                var authors = '';\n                                for (var k in data[i][j]) {\n                                    authors += data[i][j][k]['name'] + ' ';\n                                }\n                                data[i][j] = authors;\n                            }\n\n                            td.append(data[i][j]);\n                            tr.append(td);\n\n                        }\n\n                        //循环完，最后把编辑与删除按钮添加进去\n                        var tdd = document.createElement('td');\n                        tdd.innerHTML = '<td><a class=\"btn btn-primary edit_book\"><span class=\"glyphicon glyphicon-pencil\" aria-hidden=\"true\"></span><span>编辑</span>\\n' +\n                            '</a><a class=\"btn btn-danger del_book\"><span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span><span>删除</span></a></td>';\n\n                        tr.append(tdd);\n\n                        // 最后将tr加到tbody中\n                        $('#tbody').append(tr);\n\n                    }\n                }\n            })\n        });\n\n        // 删除按钮的点击事件\n        // 用委托实现\n        // 这里也可以加一个\"模态对话框\"～给用户一个确认删除删除的提示\n        $('#tbody').on('click', '.del_book', function () {\n            // 找到这本书对应的id～\n            // console.log($(this).parent().parent().find('.book_pk').text());\n            var book_id = $(this).parent().parent().find('.book_pk').text();\n            $.ajax({\n                url: '/book/' + book_id + '/',\n                type: 'delete',\n                success: function (data) {\n                    location.href = '/book_list/';\n                }\n            })\n        });\n\n        // 编辑按钮的点击事件\n        // 用委托实现\n        $('#tbody').on('click', '.edit_book', function () {\n            // 找到这本书对应的id～\n            var book_id = $(this).parent().parent().find('.book_pk').text();\n            $.ajax({\n              url:'/book/'+book_id+'/',\n              type:'put',\n              success:function (data) {\n                  // data是待编辑书籍的数据\n                  console.log(data,typeof(data));\n                  // 序列化数据\n                  data_json = JSON.stringify(data);\n                  // 将数据存到session中\n                  sessionStorage.edit_book_data = data_json;\n                  // 跳转到编辑书籍页面\n                  location.href = '/edit_book_view/' + book_id +'/';\n              }\n            })\n        })\n\n\n    <\/script>\n\n{% endblock script %}\n")])])]),a("h4",{attrs:{id:"添加书籍页面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加书籍页面"}},[n._v("#")]),n._v(" 添加书籍页面")]),n._v(" "),a("p",[n._v("添加书籍发送的是post请求。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('{% extends \'base.html\' %}\n\n{% block title %}\n    主页\n{% endblock title %}\n\n\n{% block pannel-body %}\n\n    <div class="col-md-8 col-md-offset-2">\n        <h2 class="text-center">添加书籍</h2>\n        <div>\n            <div class="form-group">\n                <label for="book_name">书籍名称</label>\n                <input type="text" id="book_name" class="form-control" placeholder="书籍名称"\n                       autocomplete="off">\n                <span class="help-block"></span>\n            </div>\n            <div class="form-group">\n                <label for="price">价格</label>\n                <input type="number" id="price" class="form-control" placeholder="价格"\n                       autocomplete="off">\n                <span class="help-block"></span>\n            </div>\n            <div class="form-group">\n                <label for="pub_date">出版日期</label>\n                <input type="date" id="pub_date" class="form-control" placeholder="出版日期">\n                <span class="help-block"></span>\n            </div>\n            <div class="form-group">\n                <label for="">出版社</label>\n                <select id="publish" class="form-control">\n                    <option value="1">苹果出版社</option>\n                    <option value="2">西瓜出版社</option>\n                </select>\n            </div>\n            <div class="form-group">\n                <label for="">作者</label>\n                <select name="authors" id="authors" class="form-control" multiple>\n                    <option value="1">whw</option>\n                    <option value="2">naruto</option>\n                    <option value="3">sasuke</option>\n                </select>\n            </div>\n            <div class="form-group">\n                <h4 id="add_error" class="pull-left" style="color:red;margin-top: 0"></h4>\n                <input id="confirm_add" type="button" class="btn btn-success pull-right" value="确认添加">\n\n            </div>\n        </div>\n    </div>\n\n{% endblock pannel-body %}\n\n{% block script %}\n    <script>\n        {# 确认按钮 #}\n        $(\'#confirm_add\').click(function () {\n            {#console.log(123123);#}\n            var title = $(\'#book_name\').val();\n            var price = $(\'#price\').val();\n            var pub_date = $(\'#pub_date\').val();\n            // 下拉列表被选中的这样选取\n            var publish = $(\'#publish option:selected\').val();\n\n            //ajax操作\n            $.ajax({\n                url: \'{% url "book_get_post" %}\',\n                type: \'post\',\n\n                data: {\n                    title: title,\n                    price: price,\n                    pub_date: pub_date,\n                    //pub_date: "2019-08-02T09:35:13.064532Z",\n                    post_publish: publish,\n                    //post_authors: authors,\n                    post_authors: $(\'#authors\').val(),\n                },\n                // 传数组\n                traditional: true,\n\n                success: function (data) {\n                    console.log(data);\n                    //alert(\'添加成功！\');\n                    location.href = \'{% url "book_list" %}\';\n                }\n            })\n\n        });\n\n\n    <\/script>\n\n{% endblock script %}\n')])])]),a("h4",{attrs:{id:"编辑书籍页面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编辑书籍页面"}},[n._v("#")]),n._v(" 编辑书籍页面")]),n._v(" "),a("p",[n._v("编辑书籍这里需要说一下过程：")]),n._v(" "),a("p",[n._v("（1）首先我在书籍展示那里点击“编辑”的时候，先把当前点击的书籍的信息取出来，然后序列化，最后将序列化的数据存在session中。")]),n._v(" "),a("p",[n._v("（2）然后在编辑页面从session中获取当前需要编辑的书籍的信息并把这些信息显示在前端的input框中。")]),n._v(" "),a("p",[n._v("（3）最后根据用户输入的数据保存书籍信息。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('{% extends \'base.html\' %}\n\n{% block title %}\n    主页\n{% endblock title %}\n\n\n{% block pannel-body %}\n\n    <div class="col-md-8 col-md-offset-2">\n        <h2 class="text-center">编辑书籍</h2>\n        <div>\n            <div class="form-group">\n                <label for="book_name">书籍名称</label>\n                <input type="text" id="book_name" class="form-control" placeholder="书籍名称"\n                       autocomplete="off">\n                <span class="help-block"></span>\n            </div>\n            <div class="form-group">\n                <label for="price">价格</label>\n                <input type="number" id="price" class="form-control" placeholder="价格"\n                       autocomplete="off">\n                <span class="help-block"></span>\n            </div>\n            <div class="form-group">\n                <label for="pub_date">出版日期</label>\n                <input type="date" id="pub_date" class="form-control" placeholder="出版日期">\n                <span class="help-block"></span>\n            </div>\n            <div class="form-group">\n                <label for="">出版社</label>\n                <select id="publish" class="form-control">\n                    <option value="1">苹果出版社</option>\n                    <option value="2">西瓜出版社</option>\n                </select>\n            </div>\n            <div class="form-group">\n                <label for="">作者</label>\n                <select name="authors" id="authors" class="form-control" multiple>\n                    <option value="1">whw</option>\n                    <option value="2">naruto</option>\n                    <option value="3">sasuke</option>\n                </select>\n            </div>\n            <div class="form-group">\n                <h4 id="add_error" class="pull-left" style="color:red;margin-top: 0"></h4>\n                <input id="confirm_add" type="button" class="btn btn-success pull-right" value="确认编辑">\n\n            </div>\n        </div>\n    </div>\n\n{% endblock pannel-body %}\n\n{% block script %}\n    <script>\n\n\n        // 页面加载后将session中的数据写到上面的标签中\n        $(document).ready(function () {\n\n            // 获取session中的数据\n            var data_session = sessionStorage[\'edit_book_data\'];\n            // 记得反序列化一下\n            var data = JSON.parse(data_session);\n            console.log(data, typeof (data));\n            // 取出edit_book_id 把它设置为全局的变量！后面ajax提交的时候会用到\n            edit_book_id = data[\'id\'];\n\n            // 将数据填在上面的input框中~注意是val方法！\n            $(\'#book_name\').val(data[\'title\']);\n            $(\'#price\').val(data[\'price\']);\n            $(\'#pub_date\').val(data[\'pub_date\']);\n            $(\'#publish\').val(data[\'publish\'][\'id\']);\n            // 让之前的作者名被选中\n            var arr_val = [];\n            for(var i in data[\'authors\']){\n                //console.log(data[\'authors\'][i][\'id\']);\n                arr_val.push(data[\'authors\'][i][\'id\'])\n            }\n            // console.log(arr_val); [1,2]\n            // 把数组传给复选框的val～让之前的作者被选中\n            $(\'#authors\').val(arr_val);\n\n        });\n\n\n        // 确认编辑按钮\n        $(\'#confirm_add\').click(function () {\n            var title = $(\'#book_name\').val();\n            var price = $(\'#price\').val();\n            var pub_date = $(\'#pub_date\').val();\n            // 下拉列表被选中的这样选取\n            var publish = $(\'#publish option:selected\').val();\n\n            //ajax操作\n            $.ajax({\n                url: \'/book/\'+edit_book_id+\'/\',\n                type: \'put\',\n                data: {\n                    title: title,\n                    price: price,\n                    pub_date: pub_date,\n                    //pub_date: "2019-08-02T09:35:13.064532Z",\n                    post_publish: publish,\n                    //post_authors: authors,\n                    post_authors: $(\'#authors\').val(),\n                },\n                // 传数组～\n                traditional: true,\n\n                success: function (data) {\n                    console.log(data);\n                    //alert(\'添加成功！\');\n                    location.href = \'{% url "book_list" %}\';\n                }\n            })\n\n        });\n\n    <\/script>\n\n{% endblock script %}\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);