(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{362:function(t,s,a){"use strict";a.r(s);var e=a(42),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"包-module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包-module"}},[t._v("#")]),t._v(" 包&module")]),t._v(" "),a("p",[t._v("在工程化的Go语言开发项目中，Go语言的源码复用是建立在包（package）基础之上的。本文介绍了Go语言中如何定义包、如何导出包的内容及如何导入其他包。")]),t._v(" "),a("h2",{attrs:{id:"go语言的包-package"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go语言的包-package"}},[t._v("#")]),t._v(" Go语言的包（package）")]),t._v(" "),a("p",[a("code",[t._v("包（package）")]),t._v("是多个Go源码的集合，是一种高级的代码复用方案，Go语言为我们提供了很多内置包，如"),a("code",[t._v("fmt")]),t._v("、"),a("code",[t._v("os")]),t._v("、"),a("code",[t._v("io")]),t._v("等。")]),t._v(" "),a("h4",{attrs:{id:"定义包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义包"}},[t._v("#")]),t._v(" 定义包")]),t._v(" "),a("p",[t._v("我们还可以根据自己的需要创建自己的包。一个包可以简单理解为一个存放"),a("code",[t._v(".go")]),t._v("文件的文件夹。 该文件夹下面的所有go文件都要在代码的第一行添加如下代码，声明该文件归属的包。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" 包名\n")])])]),a("p",[t._v("注意事项：")]),t._v(" "),a("ul",[a("li",[t._v("一个文件夹下面直接包含的文件只能归属一个"),a("code",[t._v("package")]),t._v("，同样一个"),a("code",[t._v("package")]),t._v("的文件不能在多个文件夹下。")]),t._v(" "),a("li",[t._v("包名可以不和文件夹的名字一样，包名不能包含 "),a("code",[t._v("-")]),t._v(" 符号。")]),t._v(" "),a("li",[t._v("包名为"),a("code",[t._v("main")]),t._v("的包为应用程序的入口包，这种包编译后会得到一个可执行文件，而编译不包含"),a("code",[t._v("main")]),t._v("包的源代码则不会得到可执行文件。")])]),t._v(" "),a("h4",{attrs:{id:"可见性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可见性"}},[t._v("#")]),t._v(" 可见性")]),t._v(" "),a("p",[t._v("如果想在一个包中引用另外一个包里的标识符（如变量、常量、类型、函数等）时，该标识符必须是对外可见的（public）。在Go语言中只需要将标识符的首字母大写就可以让标识符对外可见了。")]),t._v(" "),a("p",[t._v("举个例子， 我们定义一个包名为"),a("code",[t._v("pkg2")]),t._v("的包，代码如下：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" pkg2\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 包变量可见性")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首字母小写，外部包不可见，只能在当前包内使用")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首字母大写外部包可见，可在其他包中使用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Mode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首字母小写，外部包不可见，只能在当前包内使用")]),t._v("\n\tname "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首字母大写，外部包可见，可在其他包中使用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首字母小写，外部包不可见，只能在当前包内使用")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" Age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数局部变量，外部包不可见，只能在当前函数内使用")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("结构体中的字段名和接口中的方法名如果首字母都是大写，外部包可以访问这些字段和方法。例如：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Student "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tName  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//可在包外访问的方法")]),t._v("\n\tclass "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//仅限包内访问的字段")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Payer "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//仅限包内访问的方法")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pay")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//可在包外访问的方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"包的导入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包的导入"}},[t._v("#")]),t._v(" 包的导入")]),t._v(" "),a("p",[t._v("要在代码中引用其他包的内容，需要使用"),a("code",[t._v("import")]),t._v("关键字导入使用的包。具体语法如下:")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"包的路径"')]),t._v("\n")])])]),a("p",[t._v("注意事项：")]),t._v(" "),a("ul",[a("li",[t._v("import导入语句通常放在文件开头包声明语句的下面。")]),t._v(" "),a("li",[t._v("导入的包名需要使用双引号包裹起来。")]),t._v(" "),a("li",[t._v("包名是从"),a("code",[t._v("$GOPATH/src/")]),t._v("后开始计算的，使用"),a("code",[t._v("/")]),t._v("进行路径分隔。")]),t._v(" "),a("li",[t._v("Go语言中禁止循环导入包")])]),t._v(" "),a("h4",{attrs:{id:"单行导入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单行导入"}},[t._v("#")]),t._v(" 单行导入")]),t._v(" "),a("p",[t._v("单行导入的格式如下：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"包1"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"包2"')]),t._v("\n")])])]),a("h4",{attrs:{id:"多行导入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多行导入"}},[t._v("#")]),t._v(" 多行导入")]),t._v(" "),a("p",[t._v("多行导入的格式如下：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"包1"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"包2"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"自定义包名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义包名"}},[t._v("#")]),t._v(" 自定义包名")]),t._v(" "),a("p",[t._v("在导入包名的时候，我们还可以为导入的包设置别名。通常用于导入的包名太长或者导入的包名冲突的情况。具体语法格式如下：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" 别名 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"包的路径"')]),t._v("\n")])])]),a("p",[t._v("单行导入方式定义别名：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"github.com/Q1mi/studygo/pkg_test"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("多行导入方式定义别名：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n    m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"github.com/Q1mi/studygo/pkg_test"')]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"init-初始化函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-初始化函数"}},[t._v("#")]),t._v(" init()初始化函数")]),t._v(" "),a("p",[t._v("在Go语言程序执行时导入包语句会自动触发包内部"),a("code",[t._v("init()")]),t._v("函数的调用。需要注意的是： "),a("code",[t._v("init()")]),t._v("函数没有参数也没有返回值。 "),a("code",[t._v("init()")]),t._v("函数在程序运行时自动被调用执行，不能在代码中主动调用它。")]),t._v(" "),a("p",[t._v("包初始化执行的顺序如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.liwenzhou.com/images/Go/package/init01.png",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"init-函数执行顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-函数执行顺序"}},[t._v("#")]),t._v(" init()函数执行顺序")]),t._v(" "),a("p",[t._v("Go语言包会从"),a("code",[t._v("main")]),t._v("包开始检查其导入的所有包，每个包中又可能导入了其他的包。Go编译器由此构建出一个树状的包引用关系，再根据引用顺序决定编译顺序，依次编译这些包的代码。")]),t._v(" "),a("p",[t._v("在运行时，被最后导入的包会最先初始化并调用其"),a("code",[t._v("init()")]),t._v("函数， 如下图示："),a("img",{attrs:{src:"https://www.liwenzhou.com/images/Go/package/init02.png",alt:"包之间的init()执行顺序"}})]),t._v(" "),a("h2",{attrs:{id:"go-module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go-module"}},[t._v("#")]),t._v(" Go module")]),t._v(" "),a("p",[a("code",[t._v("Go1.1.1")]),t._v("版本发布(2018-08-24发布)已经过去几天，从官方的博客中看到，有两个比较突出的特色，一个就是今天讲的"),a("code",[t._v("module")]),t._v("，模块概念。目前该功能还在试验阶段，有些地方还需要不断的进行完善。在官方正式宣布之前，打算不断修正这种支持。到时候就可以移除对"),a("code",[t._v("GOPATH")]),t._v("和"),a("code",[t._v("go get")]),t._v("命令的支持。\n如果你想现在想就试试这个新功能"),a("code",[t._v("module")]),t._v("，需要你将你的代码仓库放到"),a("code",[t._v("GOPATH/src")]),t._v("目录之外。然后在那个目录下创建一个"),a("code",[t._v("go.mod")]),t._v("文件，从文件树中运行"),a("code",[t._v("go")]),t._v("命令。")]),t._v(" "),a("h3",{attrs:{id:"主要概念介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要概念介绍"}},[t._v("#")]),t._v(" 主要概念介绍")]),t._v(" "),a("p",[a("code",[t._v("module")]),t._v("是一个相关"),a("code",[t._v("Go")]),t._v("包的集合，它是源代码更替和版本控制的单元。模块由源文件形成的"),a("code",[t._v("go.mod")]),t._v("文件的根目录定义，包含"),a("code",[t._v("go.mod")]),t._v("文件的目录也被称为模块根。"),a("code",[t._v("moudles")]),t._v("取代旧的的基于"),a("code",[t._v("GOPATH")]),t._v("方法来指定在工程中使用哪些源文件或导入包。模块路径是导入包的路径前缀，"),a("code",[t._v("go.mod")]),t._v("文件定义模块路径，并且列出了在项目构建过程中使用的特定版本。")]),t._v(" "),a("h4",{attrs:{id:"go-mod文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go-mod文件"}},[t._v("#")]),t._v(" go.mod文件")]),t._v(" "),a("p",[a("code",[t._v("go.mod")]),t._v("文件定义"),a("code",[t._v("module")]),t._v("路径以及列出其他需要在"),a("code",[t._v("build")]),t._v("时引入的模块的特定的版本。例如下面的例子中，"),a("code",[t._v("go.mod")]),t._v("声明"),a("code",[t._v("example.com/m")]),t._v("路径时"),a("code",[t._v("module")]),t._v("的根目录，同时也声明了"),a("code",[t._v("module")]),t._v("依赖特定版本的"),a("code",[t._v("golang.org/x/text")]),t._v("和"),a("code",[t._v("gopkg.in/yaml.v2")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("module example.com/m\n\nrequire (\n    golang.org/x/text v0.3.0\n    gopkg.in/yaml.v2  v2.1.0\n)\n123456\n")])])]),a("p",[a("code",[t._v("go.mod")]),t._v("文件还可以指定要替换和排除的版本，命令行会自动根据"),a("code",[t._v("go.mod")]),t._v("文件来维护需求声明中的版本。如果想获取更多的有关"),a("code",[t._v("go.mod")]),t._v("文件的介绍，可以使用命令"),a("code",[t._v("go help go.mod")]),t._v("。\n"),a("code",[t._v("go.mod")]),t._v("文件用"),a("code",[t._v("//")]),t._v("注释，而不用"),a("code",[t._v("/**/")]),t._v("。文件的每行都有一条指令，由一个动作加上参数组成。例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("odule my/thing\nrequire other/thing \tv1.0.2\nrequire new/thing \t\tv2.3.4\nexclude old/thing \t\tv1.2.3\nreplace bad/thing \t\tv1.4.5 \t=> good/thing v1.4.5\n")])])]),a("p",[t._v("上面三个动词"),a("code",[t._v("require")]),t._v("、"),a("code",[t._v("exclude")]),t._v("、"),a("code",[t._v("replace")]),t._v("分别表示：项目需要的依赖包及版本、排除某些包的特别版本、取代当前项目中的某些依赖包。\n相同动作的命令可以放到一个动词+括号组成的结构中，例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("require (\n    new/thing v2.3.4\n    old/thing v1.2.3\n)\n\n")])])]),a("h4",{attrs:{id:"其他命令的支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他命令的支持"}},[t._v("#")]),t._v(" 其他命令的支持")]),t._v(" "),a("p",[t._v("旧的版本，构建编译命令"),a("code",[t._v("go build")]),t._v("中的参数没有"),a("code",[t._v("-mod")]),t._v("参数，最新的版本现在多了这个，用来对"),a("code",[t._v("go.mod")]),t._v("文件进行更新或其他使用控制。形式如："),a("code",[t._v("go build -mod [mode]")]),t._v("，其中mode有以下几种取值："),a("code",[t._v("readonly")]),t._v("，"),a("code",[t._v("release")]),t._v("，"),a("code",[t._v("vendor")]),t._v("。当执行"),a("code",[t._v("go build -mod=vendor")]),t._v("的时候，会在生成可执行文件的同时将项目的依赖包放到主模块的"),a("code",[t._v("vendo")]),t._v("r目录下。\n"),a("code",[t._v("go get -m [packages]")]),t._v("会将下载的依赖包放到"),a("code",[t._v("GOPATH/pkg/mod")]),t._v("目录下，并且将依赖写入到"),a("code",[t._v("go.mod")]),t._v("文件。"),a("code",[t._v("go get -u=patch")]),t._v("会更新主模块下的所有依赖包。\n如果遇到不熟悉的导入包，任何可以查找包含该引入包模块的"),a("code",[t._v("go")]),t._v("命令，都会自动将该模块的最新版本添加到"),a("code",[t._v("go.mod")]),t._v("文件中。同时也会添加缺失的模块，以及删除无用的"),a("code",[t._v("module")]),t._v("。例如："),a("code",[t._v("go build")]),t._v(", "),a("code",[t._v("go test")]),t._v("或者"),a("code",[t._v("go list")]),t._v("命令。另外，有一个专门的命令"),a("code",[t._v("go mod tidy")]),t._v("，用来查看和添加缺失的"),a("code",[t._v("module")]),t._v("需求声明以及移除不必要的。\n"),a("code",[t._v("go.mod")]),t._v("文件是可读，也是可编辑的。"),a("code",[t._v("go")]),t._v("命令行会自动更新"),a("code",[t._v("go.mod")]),t._v("文件来维持一个标准格式以及精确的引入声明。")]),t._v(" "),a("h2",{attrs:{id:"go-mod命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go-mod命令"}},[t._v("#")]),t._v(" Go mod命令")]),t._v(" "),a("p",[a("code",[t._v("Go mod")]),t._v("提供了一系列操作"),a("code",[t._v("modules")]),t._v("的命令，记住，所有的"),a("code",[t._v("go")]),t._v("命令中现在已经内置了对"),a("code",[t._v("module")]),t._v("的支持，而不仅仅是"),a("code",[t._v("go mod")]),t._v("命令。例如使用"),a("code",[t._v("go get")]),t._v("时，会经常自动在后台添加、移除、升级、降级依赖包版本。\n命令语法："),a("code",[t._v("go mod [arguments]")]),t._v("。"),a("code",[t._v("Go mod")]),t._v("提供的命令有下面几个，对于比较常用的命令进行详细说明。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("download                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//下载模块到本地缓存，具体可以通过命令go env查看，其中环境变量GOCACHE就是缓存的地址，如果该文件夹的内容太大，可以通过命令go clean -cache")]),t._v("\nedit                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//从工具或脚本中编辑go.mod文件")]),t._v("\ngraph                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//打印模块需求图")]),t._v("\ninit                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在当前目录下初始化新的模块")]),t._v("\ntidy                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//添加缺失的模块以及移除无用的模块")]),t._v("\nverify                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//验证依赖项是否达到预期的目的")]),t._v("\nwhy                     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//解释为什么需要包或模块")]),t._v("\n")])])]),a("h4",{attrs:{id:"环境变量-go111module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境变量-go111module"}},[t._v("#")]),t._v(" 环境变量——GO111MODULE")]),t._v(" "),a("p",[a("code",[t._v("Go 1.11中")]),t._v("的"),a("code",[t._v("module")]),t._v("支持临时环境变量——"),a("code",[t._v("GO111MODULE")]),t._v("，它可以设置以下三个值："),a("code",[t._v("off")]),t._v(","),a("code",[t._v("on")]),t._v("或者"),a("code",[t._v("auto")]),t._v("(默认)。")]),t._v(" "),a("ul",[a("li",[t._v("如果"),a("code",[t._v("GO111MODULE=off")]),t._v("，那么"),a("code",[t._v("go")]),t._v("命令行将不会使用新的"),a("code",[t._v("module")]),t._v("功能，相反的，它将会在"),a("code",[t._v("vendor")]),t._v("目录下和"),a("code",[t._v("GOPATH")]),t._v("目录中查找依赖包。也把这种模式叫"),a("code",[t._v("GOPATH模式")]),t._v("。")]),t._v(" "),a("li",[t._v("如果"),a("code",[t._v("GO111MODULE=on")]),t._v("，那么"),a("code",[t._v("go")]),t._v("命令行就会使用"),a("code",[t._v("modules")]),t._v("功能，而不会访问"),a("code",[t._v("GOPATH")]),t._v("。也把这种模式称作"),a("code",[t._v("module-aware")]),t._v("模式，这种模式下，"),a("code",[t._v("GOPATH")]),t._v("不再在"),a("code",[t._v("build")]),t._v("时扮演导入的角色，但是尽管如此，它还是承担着存储下载依赖包的角色。它会将依赖包放在"),a("code",[t._v("GOPATH/pkg/mod")]),t._v("目录下。")]),t._v(" "),a("li",[t._v("如果"),a("code",[t._v("GO111MODULE=auto")]),t._v("，这种模式是默认的模式，也就是说在你不设置的情况下，就是"),a("code",[t._v("auto")]),t._v("。这种情况下，"),a("code",[t._v("go")]),t._v("命令行会根据当前目录来决定是否启用"),a("code",[t._v("module")]),t._v("功能。只有当当前目录在"),a("code",[t._v("GOPATH/src")]),t._v("目录之外而且当前目录包含"),a("code",[t._v("go.mod")]),t._v("文件或者其子目录包含"),a("code",[t._v("go.mod")]),t._v("文件才会启用。")])]),t._v(" "),a("h4",{attrs:{id:"具体使用步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#具体使用步骤"}},[t._v("#")]),t._v(" 具体使用步骤：")]),t._v(" "),a("ol",[a("li",[t._v("首先将你的版本更新到最新的Go版本(>=1.11)，如何更新版本可以自行百度。")]),t._v(" "),a("li",[t._v("通过go命令行，进入到你当前的工程目录下，在命令行设置临时环境变量"),a("code",[t._v("set GO111MODULE=on")]),t._v("；")]),t._v(" "),a("li",[t._v("执行命令"),a("code",[t._v("go mod init")]),t._v("在当前目录下生成一个"),a("code",[t._v("go.mod")]),t._v("文件，执行这条命令时，当前目录不能存在"),a("code",[t._v("go.mod")]),t._v("文件。如果之前生成过，要先删除；")]),t._v(" "),a("li",[t._v("如果你工程中存在一些不能确定版本的包，那么生成的"),a("code",[t._v("go.mod")]),t._v("文件可能就不完整，因此继续执行下面的命令；")]),t._v(" "),a("li",[t._v("执行"),a("code",[t._v("go mod tidy")]),t._v("命令，它会添加缺失的模块以及移除不需要的模块。执行后会生成"),a("code",[t._v("go.sum")]),t._v("文件(模块下载条目)。添加参数"),a("code",[t._v("-v")]),t._v("，例如"),a("code",[t._v("go mod tidy -v")]),t._v("可以将执行的信息，即删除和添加的包打印到命令行；")]),t._v(" "),a("li",[t._v("执行命令"),a("code",[t._v("go mod verify")]),t._v("来检查当前模块的依赖是否全部下载下来，是否下载下来被修改过。如果所有的模块都没有被修改过，那么执行这条命令之后，会打印"),a("code",[t._v("all modules verified")]),t._v("。")]),t._v(" "),a("li",[t._v("执行命令"),a("code",[t._v("go mod vendor")]),t._v("生成vendor文件夹，该文件夹下将会放置你"),a("code",[t._v("go.mod")]),t._v("文件描述的依赖包，文件夹下同时还有一个文件"),a("code",[t._v("modules.txt")]),t._v("，它是你整个工程的所有模块。在执行这条命令之前，如果你工程之前有vendor目录，应该先进行删除。同理"),a("code",[t._v("go mod vendor -v")]),t._v("会将添加到vendor中的模块打印出来；")])])])}),[],!1,null,null,null);s.default=n.exports}}]);